datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String              @id @default(cuid())
  name            String?
  username        String?             @unique
  email           String?             @unique
  emailVerified   DateTime?
  image           String?
  cvUrl           String? // URL to the user's CV PDF file
  accounts        Account[]
  sessions        Session[]
  career          String?
  period          Int?
  role            role?               @relation(fields: [roleId], references: [id])
  vacantes        Vacante[]           @relation("VacanteApplicants")
  applications    Application[]
  surveyResponses SurveyResponse[]    @relation("StudentSurveyResponses")
  jobExperience   UserJobExperience[] @relation("UserJobExperience")
  // Optional for WebAuthn support
  Authenticator   Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    String?
}

model UserJobExperience {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  initialDate DateTime
  endDate     DateTime
  companyName String
  jobRole     String
  user        User     @relation("UserJobExperience", fields: [userId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model role {
  id      String    @id @default(cuid())
  name    String    @unique
  users   User[]
  company company[]
}
